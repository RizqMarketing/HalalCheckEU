'use client'

import Link from 'next/link'
import { useState, useEffect } from 'react'
import { apiService } from '@/lib/api'
import { ISLAMIC_TERMS } from '@/lib/islamic-jurisprudence'
import { useOrganization, useOrganizationText, useOrganizationStyling } from '@/contexts/organization-context'
import OnboardingWelcome from '@/components/OnboardingWelcome'
import { analyticsTracker, trackPageView, trackFeatureUsage, trackPerformance } from '@/lib/analytics-tracker'

type Analysis = any
type UserProfile = any

export default function Dashboard() {
  const [profile, setProfile] = useState<UserProfile | null>(null)
  const [recentAnalyses, setRecentAnalyses] = useState<Analysis[]>([])
  const [showOnboarding, setShowOnboarding] = useState(false)
  const [stats, setStats] = useState({
    totalAnalyses: 0,
    halalCount: 0,
    haramCount: 0,
    mashboohCount: 0,
    costSavings: 0,
    avgProcessingTime: 0
  })
  const [loading, setLoading] = useState(true)
  
  // Removed Supabase client for mock implementation
  const { organizationType } = useOrganization()

  useEffect(() => {
    // Track page view when dashboard loads
    const startTime = performance.now()
    trackPageView('dashboard', { 
      organizationType,
      isMainDashboard: true 
    })

    // Set user context for analytics
    const userEmail = localStorage.getItem('user-email')
    const orgType = localStorage.getItem('user-organization-type')
    if (userEmail && orgType) {
      analyticsTracker.setUserContext(userEmail, orgType as any)
    }
    // Add error handling for browser extension interference
    const handleError = (error: ErrorEvent) => {
      if (error.error && (
        error.error.message?.includes('MetaMask') ||
        error.error.message?.includes('ethereum') ||
        error.error.message?.includes('wallet') ||
        error.error.stack?.includes('chrome-extension')
      )) {
        console.warn('Wallet extension error filtered in dashboard:', error.error.message)
        error.preventDefault()
        return false
      }
    }

    window.addEventListener('error', handleError)
    
    loadDashboardData().then(() => {
      // Track dashboard load performance
      const endTime = performance.now()
      trackPerformance('dashboard_load_time', endTime - startTime, {
        organizationType,
        hadCachedData: false
      })
    })
    
    // Check if user needs onboarding
    const checkOnboarding = () => {
      const onboardingCompleted = localStorage.getItem('onboarding-completed')
      const isFirstVisit = !onboardingCompleted
      
      // Show onboarding for new users after a brief delay
      if (isFirstVisit) {
        setTimeout(() => {
          setShowOnboarding(true)
        }, 1000)
      }
    }
    
    checkOnboarding()

    return () => {
      window.removeEventListener('error', handleError)
    }
  }, [])

  const loadDashboardData = async () => {
    try {
      // Load real statistics from backend with retry logic
      let dashboardStats
      let retryCount = 0
      const maxRetries = 3

      while (retryCount < maxRetries) {
        try {
          dashboardStats = await apiService.getDashboardStats()
          break
        } catch (error: any) {
          retryCount++
          if (retryCount === maxRetries) {
            console.warn('Failed to load dashboard stats after retries, using fallback')
            dashboardStats = {
              totalAnalyses: 23,
              halalCount: 15,
              haramCount: 3,
              mashboohCount: 5,
              costSavings: 1250,
              avgProcessingTime: 45
            }
          } else {
            // Wait before retry
            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount))
          }
        }
      }
      
      setStats(dashboardStats)

      // Keep mock profile for now (until authentication is integrated)
      const mockProfile = {
        id: 'demo-user-id',
        email: 'demo@halalcheck.ai',
        full_name: 'Demo User',
        company_name: 'Demo Certification Body',
        trial_started_at: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
        trial_ends_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        trial_analyses_used: dashboardStats.totalAnalyses || 23,
        trial_analyses_limit: 50,
        subscription_status: 'trial' as const,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
      
      setProfile(mockProfile)

      // Mock recent analyses (enhanced with real data context)
      const mockAnalyses = [
        {
          id: '1',
          input_filename: 'Recent_Product_Analysis.pdf',
          overall_status: 'HALAL',
          confidence_score: 0.95,
          created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
          pdf_report_url: '#'
        },
        {
          id: '2',
          input_filename: 'Ingredient_List_Review.xlsx',
          overall_status: 'MASHBOOH',
          confidence_score: 0.72,
          created_at: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),
          pdf_report_url: '#'
        },
        {
          id: '3',
          input_filename: 'Product_Certification.csv',
          overall_status: dashboardStats.haramCount > 0 ? 'HARAM' : 'HALAL',
          confidence_score: 0.98,
          created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
          pdf_report_url: '#'
        }
      ]
      
      setRecentAnalyses(mockAnalyses as any)

      // Also load recent analyses from backend
      try {
        const recentAnalysesData = await apiService.getRecentAnalyses()
        
        // Transform backend data to frontend format
        const transformedAnalyses = recentAnalysesData.map((analysis: any) => ({
          id: analysis.id,
          input_filename: `${analysis.productName}.analysis`,
          overall_status: analysis.status === 'APPROVED' ? 'HALAL' : 
                         analysis.status === 'PROHIBITED' ? 'HARAM' : 'MASHBOOH',
          confidence_score: 0.85 + Math.random() * 0.1, // Mock confidence
          created_at: analysis.createdAt,
          pdf_report_url: '#'
        }))
        
        // Use backend data if available, otherwise keep mock data
        if (transformedAnalyses.length > 0) {
          setRecentAnalyses(transformedAnalyses)
        }
      } catch (error) {
        console.error('Failed to load recent analyses from backend:', error)
        // Keep mock data as fallback
      }

    } catch (error) {
      console.error('Error loading dashboard data:', error)
      // Fallback to mock data
      setStats({
        totalAnalyses: 23,
        halalCount: 15,
        haramCount: 3,
        mashboohCount: 5,
        costSavings: 1250,
        avgProcessingTime: 45
      })
    } finally {
      setLoading(false)
    }
  }

  const getStatusBadge = (status: string) => {
    const baseClasses = "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
    switch (status) {
      case 'HALAL':
        return `${baseClasses} bg-green-100 text-green-800`
      case 'HARAM':
        return `${baseClasses} bg-red-100 text-red-800`
      case 'MASHBOOH':
        return `${baseClasses} bg-yellow-100 text-yellow-800`
      default:
        return `${baseClasses} bg-gray-100 text-gray-800`
    }
  }

  const formatTimeAgo = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60))
    const diffDays = Math.floor(diffHours / 24)

    if (diffDays > 0) return `${diffDays}d ago`
    if (diffHours > 0) return `${diffHours}h ago`
    return 'Just now'
  }

  const getTrialProgress = () => {
    if (!profile) return 0
    return ((profile.trial_analyses_used || 0) / (profile.trial_analyses_limit || 50)) * 100
  }

  const getRemainingTrialDays = () => {
    if (!profile) return 0
    const trialEnd = new Date(profile.trial_ends_at)
    const now = new Date()
    const diffTime = trialEnd.getTime() - now.getTime()
    const diffDays = Math.max(0, Math.ceil(diffTime / (1000 * 60 * 60 * 24)))
    return diffDays
  }

  const { organizationType, isLoading } = useOrganization()
  const orgText = useOrganizationText()
  const orgStyling = useOrganizationStyling()

  if (loading || isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-green-600"></div>
      </div>
    )
  }

  return (
    <div className="relative">
      {/* Organization-specific onboarding */}
      <OnboardingWelcome 
        isVisible={showOnboarding} 
        onComplete={() => setShowOnboarding(false)} 
      />
      
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50">
      {/* Professional Islamic Header */}
      <div className="bg-white/80 backdrop-blur-xl border-b border-slate-200/60 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 via-emerald-600 to-teal-600 rounded-2xl flex items-center justify-center shadow-lg shadow-emerald-500/25">
                  <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clipRule="evenodd"/>
                  </svg>
                </div>
                <div>
                  <div className="text-2xl font-bold bg-gradient-to-r from-slate-900 via-slate-800 to-emerald-800 bg-clip-text text-transparent">
                    HalalCheck AI
                  </div>
                  <div className="text-sm text-slate-600">
                    Islamic Certification Platform - {ISLAMIC_TERMS.HALAL.arabic} Analysis
                  </div>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-600">
                Welcome back, {profile?.full_name || 'User'}
              </div>
              <div className="relative group">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center cursor-pointer">
                  <span className="text-sm font-medium text-green-800">
                    {profile?.full_name?.[0] || 'U'}
                  </span>
                </div>
                <div className="absolute right-0 mt-2 w-48 bg-white z-50 rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                  <div className="py-2">
                    <Link href="/dashboard/settings" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                      Settings
                    </Link>
                    <button
                      onClick={() => {
                        // Mock sign out - just redirect to home
                        window.location.href = '/'
                      }}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                    >
                      Sign Out
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Trial Status Alert */}
        {profile?.subscription_status === 'trial' && (
          <div className="bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-lg p-4 mb-8">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-orange-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-orange-800">
                    Trial Active - {getRemainingTrialDays()} days remaining
                  </h3>
                  <div className="mt-2 text-sm text-orange-700">
                    <div className="flex items-center space-x-4">
                      <span>{profile.trial_analyses_used || 0} / {profile.trial_analyses_limit || 50} analyses used</span>
                      <div className="flex-1 max-w-xs">
                        <div className="bg-white rounded-full h-2">
                          <div 
                            className="bg-orange-400 h-2 rounded-full transition-all duration-300" 
                            style={{ width: `${getTrialProgress()}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <Link
                href="/dashboard/billing"
                className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
              >
                Upgrade Now
              </Link>
            </div>
          </div>
        )}

        {/* Professional Quick Actions Panel - Organization Aware */}
        <QuickActionsPanel />


        {/* Workflow Status Dashboard - Organization Aware */}
        <WorkflowStatusDashboard />


        {/* Enhanced Statistics Dashboard with Organization Context */}
        <StatisticsDashboard stats={stats} />


        {/* Enhanced Recent Analyses with Activity Feed */}
        <div className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-slate-200/60">
          <div className="px-6 py-4 border-b border-slate-200/60">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-br from-slate-500 to-slate-600 rounded-xl flex items-center justify-center">
                  <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd"/>
                  </svg>
                </div>
                <h2 className="text-xl font-bold text-slate-900">Recent Activity</h2>
                <span className="text-sm text-slate-500">Latest certification analyses</span>
              </div>
              <Link
                href="/dashboard/history"
                className="inline-flex items-center space-x-1 text-sm text-emerald-600 hover:text-emerald-700 font-medium transition-colors"
              >
                <span>View all</span>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </Link>
            </div>
          </div>
          <div className="divide-y divide-slate-200/60">
            {recentAnalyses.length > 0 ? (
              recentAnalyses.map((analysis) => (
                <div key={analysis.id} className="px-6 py-5 hover:bg-slate-50/50 transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-10 h-10 bg-gradient-to-br from-slate-100 to-slate-200 rounded-xl flex items-center justify-center border border-slate-200">
                        <svg className="w-5 h-5 text-slate-600" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd"/>
                        </svg>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-1">
                          <p className="text-sm font-semibold text-slate-900">
                            {analysis.input_filename || 'Text Analysis'}
                          </p>
                          <div className={`px-3 py-1 text-xs font-medium rounded-full border ${
                            analysis.overall_status === 'HALAL' ? 'text-emerald-700 bg-emerald-50 border-emerald-200' :
                            analysis.overall_status === 'HARAM' ? 'text-red-700 bg-red-50 border-red-200' :
                            'text-amber-700 bg-amber-50 border-amber-200'
                          }`}>
                            {analysis.overall_status === 'HALAL' ? `${ISLAMIC_TERMS.HALAL.transliteration} (${ISLAMIC_TERMS.HALAL.arabic})` :
                             analysis.overall_status === 'HARAM' ? `${ISLAMIC_TERMS.HARAM.transliteration} (${ISLAMIC_TERMS.HARAM.arabic})` :
                             `${ISLAMIC_TERMS.MASHBOOH.transliteration} (${ISLAMIC_TERMS.MASHBOOH.arabic})`}
                          </div>
                        </div>
                        <div className="flex items-center space-x-4 text-xs text-slate-500">
                          <div className="flex items-center space-x-1">
                            <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd"/>
                            </svg>
                            <span>{formatTimeAgo(analysis.created_at)}</span>
                          </div>
                          {analysis.confidence_score && (
                            <div className="flex items-center space-x-1">
                              <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                              </svg>
                              <span>{Math.round(analysis.confidence_score * 100)}% confidence</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-3">
                      {analysis.pdf_report_url && (
                        <a
                          href={analysis.pdf_report_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="inline-flex items-center space-x-1 px-3 py-1.5 bg-emerald-100 hover:bg-emerald-200 text-emerald-700 text-xs font-medium rounded-lg transition-colors"
                        >
                          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clipRule="evenodd"/>
                          </svg>
                          <span>View Report</span>
                        </a>
                      )}
                      <button className="w-8 h-8 bg-slate-100 hover:bg-slate-200 rounded-lg flex items-center justify-center transition-colors">
                        <svg className="w-4 h-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h.01M12 12h.01M19 12h.01" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="px-6 py-12 text-center">
                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 className="mt-2 text-sm font-medium text-gray-900">No analyses yet</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Get started by uploading your first product for analysis.
                </p>
                <div className="mt-6">
                  <Link
                    href="/dashboard/analyze"
                    className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700"
                  >
                    <svg className="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    Start First Analysis
                  </Link>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

// Organization-aware Quick Actions Panel
function QuickActionsPanel() {
  const { config } = useOrganization()
  const orgText = useOrganizationText()
  const orgStyling = useOrganizationStyling()

  return (
    <div className="mb-8">
      <div className="flex items-center space-x-3 mb-6">
        <div className={`w-8 h-8 ${orgStyling.colors.primary} rounded-xl flex items-center justify-center`}>
          <span className="text-xl">{config.icon}</span>
        </div>
        <h2 className="text-xl font-bold text-slate-900">{orgText.getWorkflowName()}</h2>
        <span className="text-sm text-slate-500">{config.description}</span>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* AI Analysis - Universal */}
        <Link
          href="/dashboard/analyze"
          onClick={() => trackFeatureUsage('ai_analysis_quick_action', { source: 'dashboard_quick_actions' })}
          className={`group relative ${orgStyling.colors.primary} p-6 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 border border-emerald-400/20`}
        >
          <div className="flex items-start justify-between mb-4">
            <div className="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center">
              <svg className="h-6 w-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clipRule="evenodd"/>
              </svg>
            </div>
            <div className="text-xs bg-white/20 backdrop-blur-sm px-2 py-1 rounded-full text-white font-medium">START HERE</div>
          </div>
          <h3 className="text-lg font-bold text-white mb-2">AI Ingredient Analysis</h3>
          <p className="text-emerald-100 text-sm mb-4">Start workflow: Analyze → Save to {orgText.getPipelineName()}</p>
        </Link>

        {/* Pipeline Management */}
        <Link
          href="/dashboard/applications"
          onClick={() => trackFeatureUsage('pipeline_management_quick_action', { source: 'dashboard_quick_actions' })}
          className="group relative bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 border border-slate-200/60 hover:border-blue-300/60"
        >
          <div className="flex items-start justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg shadow-blue-500/25">
              <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
              </svg>
            </div>
          </div>
          <h3 className="text-lg font-bold text-slate-900 mb-2">{orgText.getPipelineName()}</h3>
          <p className="text-slate-600 text-sm mb-4">Manage {orgText.getItemName(false).toLowerCase()} & workflow</p>
        </Link>

        {/* Documents/Certificates */}
        <Link
          href="/dashboard/certificates"
          onClick={() => trackFeatureUsage('certificates_quick_action', { source: 'dashboard_quick_actions' })}
          className="group relative bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 border border-slate-200/60 hover:border-purple-300/60"
        >
          <div className="flex items-start justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg shadow-purple-500/25">
              <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
          <h3 className="text-lg font-bold text-slate-900 mb-2">{orgText.getDocumentAction()}</h3>
          <p className="text-slate-600 text-sm mb-4">Generate {orgText.getDocumentName().toLowerCase()}s</p>
        </Link>

        {/* Analytics */}
        <Link
          href="/dashboard/analytics"
          onClick={() => trackFeatureUsage('analytics_quick_action', { source: 'dashboard_quick_actions' })}
          className="group relative bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 border border-slate-200/60 hover:border-red-300/60"
        >
          <div className="flex items-start justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-red-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg shadow-red-500/25">
              <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
          </div>
          <h3 className="text-lg font-bold text-slate-900 mb-2">Analytics Reports</h3>
          <p className="text-slate-600 text-sm mb-4">Business insights & performance metrics</p>
        </Link>
      </div>
    </div>
  )
}

// Organization-aware Workflow Status Dashboard
function WorkflowStatusDashboard() {
  const { stages } = useOrganization()
  const orgText = useOrganizationText()
  const orgStyling = useOrganizationStyling()

  return (
    <div className="mb-8">
      <div className="flex items-center space-x-3 mb-6">
        <div className={`w-8 h-8 ${orgStyling.colors.primary} rounded-xl flex items-center justify-center`}>
          <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd"/>
          </svg>
        </div>
        <h2 className="text-xl font-bold text-slate-900">Integrated Workflow</h2>
        <span className="text-sm text-slate-500">Analysis → {stages.map(s => s.title).join(' → ')} → Analytics</span>
      </div>

      <div className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-slate-200/60 p-6 mb-8">
        <div className={`grid gap-6 ${stages.length <= 4 ? 'grid-cols-1 md:grid-cols-4' : 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'}`}>
          {/* Analysis Step */}
          <div className="text-center">
            <div className={`w-16 h-16 ${orgStyling.colors.primary} rounded-2xl flex items-center justify-center mx-auto mb-3 shadow-lg`}>
              <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clipRule="evenodd"/>
              </svg>
            </div>
            <h3 className="font-bold text-slate-900 mb-1">1. Analyze</h3>
            <p className="text-sm text-slate-600">AI ingredient analysis</p>
            <div className="mt-2">
              <Link 
                href="/dashboard/analyze"
                className={`text-xs ${orgStyling.colors.text} font-medium hover:opacity-80`}
              >
                Start Analysis →
              </Link>
            </div>
          </div>

          {/* Pipeline Steps */}
          {stages.slice(0, -1).map((stage, index) => (
            <div key={stage.id} className="text-center">
              <div className={`w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-3 shadow-lg shadow-blue-500/25`}>
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <h3 className="font-bold text-slate-900 mb-1">{index + 2}. {stage.title}</h3>
              <p className="text-sm text-slate-600">{stage.description}</p>
              <div className="mt-2">
                <Link 
                  href="/dashboard/applications"
                  className="text-xs text-blue-600 hover:text-blue-700 font-medium"
                >
                  View {orgText.getPipelineName()} →
                </Link>
              </div>
            </div>
          ))}

          {/* Final Step */}
          <div className="text-center">
            <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl flex items-center justify-center mx-auto mb-3 shadow-lg shadow-red-500/25">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
            <h3 className="font-bold text-slate-900 mb-1">{stages.length + 1}. Analytics</h3>
            <p className="text-sm text-slate-600">Performance insights</p>
            <div className="mt-2">
              <Link 
                href="/dashboard/analytics"
                className="text-xs text-red-600 hover:text-red-700 font-medium"
              >
                View Analytics →
              </Link>
            </div>
          </div>
        </div>

        <div className="mt-6 pt-6 border-t border-slate-200/60">
          <div className="flex items-center justify-between">
            <div className="text-sm text-slate-600">
              <span className="font-medium">Complete Workflow:</span> Seamlessly integrated from ingredient analysis to business insights
            </div>
            <div className={`flex items-center space-x-2 text-sm ${orgStyling.colors.text}`}>
              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/>
              </svg>
              <span className="font-medium">Fully Connected</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Organization-aware Statistics Dashboard
function StatisticsDashboard({ stats }: { stats: any }) {
  const { config } = useOrganization()
  const orgText = useOrganizationText()

  return (
    <div className="mb-8">
      <div className="flex items-center space-x-3 mb-6">
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
          <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"/>
          </svg>
        </div>
        <h2 className="text-xl font-bold text-slate-900">{config.name} Analytics</h2>
        <span className="text-sm text-slate-500">Performance metrics & Islamic compliance</span>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-slate-200/60 hover:shadow-2xl transition-all duration-300">
          <div className="flex items-center justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg shadow-blue-500/25">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full font-medium">TOTAL</div>
          </div>
          <div className="mb-2">
            <p className="text-3xl font-bold text-slate-900">{stats.totalAnalyses}</p>
            <p className="text-sm text-slate-600">Total Analyses</p>
          </div>
          <div className="text-xs text-slate-500">
            Products reviewed for halal compliance
          </div>
        </div>

        <div className="bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-slate-200/60 hover:shadow-2xl transition-all duration-300">
          <div className="flex items-center justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg shadow-emerald-500/25">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <div className="text-xs bg-emerald-100 text-emerald-700 px-2 py-1 rounded-full font-medium">HALAL</div>
          </div>
          <div className="mb-2">
            <p className="text-3xl font-bold text-slate-900">{stats.halalCount}</p>
            <p className="text-sm text-slate-600">
              {ISLAMIC_TERMS.HALAL.transliteration} Products
              <span className="text-xs text-emerald-600 ml-1">({ISLAMIC_TERMS.HALAL.arabic})</span>
            </p>
          </div>
          <div className="text-xs text-slate-500">
            Approved for Islamic consumption
          </div>
        </div>

        <div className="bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-slate-200/60 hover:shadow-2xl transition-all duration-300">
          <div className="flex items-center justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-amber-600 rounded-xl flex items-center justify-center shadow-lg shadow-amber-500/25">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="text-xs bg-amber-100 text-amber-700 px-2 py-1 rounded-full font-medium">SPEED</div>
          </div>
          <div className="mb-2">
            <p className="text-3xl font-bold text-slate-900">
              {Math.round(stats.avgProcessingTime || 0)}s
            </p>
            <p className="text-sm text-slate-600">Avg Processing Time</p>
          </div>
          <div className="text-xs text-slate-500">
            95% faster than manual review
          </div>
        </div>

        <div className="bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-slate-200/60 hover:shadow-2xl transition-all duration-300">
          <div className="flex items-center justify-between mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg shadow-purple-500/25">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
              </svg>
            </div>
            <div className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full font-medium">SAVINGS</div>
          </div>
          <div className="mb-2">
            <p className="text-3xl font-bold text-slate-900">€{Math.round(stats.costSavings)}</p>
            <p className="text-sm text-slate-600">Cost Savings</p>
          </div>
          <div className="text-xs text-slate-500">
            Compared to manual scholarly review
          </div>
        </div>
      </div>
    </div>
    </div>
  )
}